'''Август и Беатриса играют в игру. Август загадал натуральное число от 1 до
n . Беатриса пытается угадать это число, для этого она называет некоторые
множества натуральных чисел. Август отвечает Беатрисе  YES , если среди
названных ей чисел есть задуманное или  NO  в противном случае. После
нескольких заданных вопросов Беатриса запуталась в том, какие вопросы она
задавала и какие ответы получила и просит вас помочь ей определить, какие
числа мог задумать Август.
Август начал жульничать. На каждый из вопросов Беатрисы он выбирает
такой вариант ответа  YES  или  NO , чтобы множество возможных задуманных
чисел оставалось как можно больше. Например, если Август задумал число от
1 до 5, а Беатриса спросила про числа 1 и 2, то Август ответит  NO , а если
Беатриса спросит про 1, 2, 3, то Август ответит  YES .
Если же Беатриса в своем вопросе перечисляет ровно половину из
задуманных чисел, то Август из вредности всегда отвечает  NO . Наконец,
Август при ответе учитывает все предыдущие вопросы Беатрисы и свои
ответы на них, то есть множество возможных задуманных чисел уменьшается.
Первая строка содержит наибольшее число, которое мог загадать Август.
Каждая следующая строка содержит очередной вопрос Беатрисы: набор
чисел, разделенных пробелами. Последняя строка входных данных содержит
одно слово  HELP .
Для каждого вопроса Беатрисы выведите ответ Августа на этот вопрос. После
этого выведите через пробел, в порядке возрастания, все числа, которые мог
загадать Август после ответа на все вопросы Беатрисы.
'''
def task(meth: str, **kwargs) -> str:
    mn = dict()
    for value in kwargs.values():
        if value[0] not in mn:
            mn[value[0]] = set([int(i) for i in str(value[1:])])
        else:
            mn[value[0]] = set(mn[value[0]]).union([int(i) for i in str(value[1:])])
    
    if meth == "OR":
        return set.union(*[i for i in list(mn.values())])
    if meth == "AND":
        return set.intersection(*[i for i in list(mn.values())])
    if meth == "NOT":
        return set.difference(*[i for i in list(mn.values())])